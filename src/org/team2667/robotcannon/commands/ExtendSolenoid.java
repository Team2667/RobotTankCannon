// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.team2667.robotcannon.commands;

import org.team2667.robotcannon.Robot;

import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.command.Command;

/**
 *
 */
public class  ExtendSolenoid extends Command {

	private final Solenoid solenoid;

	// Safety requires the L2 and R2 buttons to be pressed before the solenoid is fired
	private static final boolean SAFETY_ENABLED = true;
	
	// Requires the cannon to be clear for firing by distance
	private static final boolean DISTANCE_SENSOR_ENABLED = true;
	
	private static final boolean ENSURE_COMPRESSION_IS_FINISHED_ENABLED = false;
	
	// Minimum firing distance in feet
	private static final int MINIMUM_FIRING_DISTANCE_FT = 6;

	public ExtendSolenoid(Solenoid solenoid) {
		// Use requires() here to declare subsystem dependencies
		// eg. requires(chassis);

		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.pneumatics);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		this.solenoid = solenoid;
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		
		// The robot cannot fire until the inital pressure is reached
		if (ENSURE_COMPRESSION_IS_FINISHED_ENABLED) {
			if (!Robot.pneumatics.isInitialCompressionFinished()) {
				System.out.println("Error: Cannot fire solenoid until initial compression finishes!");
				return;
			}
		}
	
		
		if (SAFETY_ENABLED) {
			if (!(Robot.oi.logitech_L2.get() && Robot.oi.logitech_R2.get())) {
				System.out.println("Error: When safety is enabled you must hold L2 and R2 at the same time to fire");
				return;
			}
		}
		
		if (DISTANCE_SENSOR_ENABLED) {
			if (Robot.sensors.getDistanceInFeet() <= MINIMUM_FIRING_DISTANCE_FT) {
				System.out.println("Error: Cannon is blocked, object is too close " + "Distance = " + Robot.sensors.getDistanceInFeet() + "ft");
				return;
			}
		}
		
		this.solenoid.set(true);
		System.out.println("Fired the cannon");

	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return true;
	}

	// Called once after isFinished returns true
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		end();
	}
}
