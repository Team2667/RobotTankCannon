// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.team2667.robotcannon.subsystems;

import org.team2667.robotcannon.RobotMap;
import org.team2667.robotcannon.commands.*;
import edu.wpi.first.wpilibj.*;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 * Pneumatics Subsystem
 * @author Haruko
 * @since September 19, 2015
 */
public class Pneumatics extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Compressor compressor = RobotMap.pneumaticsCompressor;
    Solenoid solenoid_A = RobotMap.pneumaticsSolenoid_A;
    Solenoid solenoid_B = RobotMap.pneumaticsSolenoid_B;
    Solenoid solenoid_X = RobotMap.pneumaticsSolenoid_X;
    Solenoid solenoid_Y = RobotMap.pneumaticsSolenoid_Y;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    boolean finishedInitialCompression;
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new CompressAir());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    /**
     * Starts the compressor loop
     * @param enabled
     */
    public void setClosedLoopControl(boolean enabled) {
    	this.compressor.setClosedLoopControl(enabled);
    	compressor.getPressureSwitchValue();
    }
    
    public boolean isInitialCompressionFinished() {
    	return this.finishedInitialCompression;
    }
    
    public void resetCompressionFinished() {
    	finishedInitialCompression = false;
    }
    
    public void finishInitialCompression() {
    	finishedInitialCompression = true;
    }
    
    public boolean isPressureHigh() {
    	return !this.compressor.getPressureSwitchValue();
    }
    
    public Solenoid getSolenoidA() {
    	return solenoid_A;
    }
    
    public Solenoid getSolenoidB() {
    	return solenoid_B;
    }
    
    public Solenoid getSolenoidX() {
    	return solenoid_X;
    }
    
    public Solenoid getSolenoidY() {
    	return solenoid_Y;
    }
    
}

